<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  ~ [y] hybris Platform
  ~
  ~ Copyright (c) 2000-2016 hybris AG
  ~ All rights reserved.
  ~
  ~ This software is the confidential and proprietary information of hybris
  ~ ("Confidential Information"). You shall not disclose such Confidential
  ~ Information and shall use it only in accordance with the terms of the
  ~ license agreement you entered into with hybris.
 -->
 <!--
 All hybris buildcallbacks.xml macrodefinitions:

 Build/Documentation

	 before/after ant macro "clean"
		 <macrodef name="instorecsbackoffice_before_clean"/>
		 <macrodef name="instorecsbackoffice_after_clean"/>

	 before/after ant macro "build"
		 <macrodef name="instorecsbackoffice_before_build"/>
		 <macrodef name="instorecsbackoffice_after_build"/>

	 before/after ant macro "compile_core" - the core module of the extension
		 <macrodef name="instorecsbackoffice_before_compile_core">
		 <macrodef name="instorecsbackoffice_after_compile_core">

	 before/after ant macro "compile_web" - the web module of the extension
		 <macrodef name="instorecsbackoffice_before_compile_web" />
		 <macrodef name="instorecsbackoffice_after_compile_web" />

	 before/after ant macro "compile_hmc" - the hmc module of the extension
		 <macrodef name="instorecsbackoffice_before_compile_hmc" />
		 <macrodef name="instorecsbackoffice_after_compile_hmc" />

 Preparing extension

	 will be called in the beginning of the ant call and only once (also when using multiple
	 ant targets e.g. ant build yunittest)
		 <macrodef name="instorecsbackoffice_only_once_prepare"/>

 Creating ear module/production

	 before/after ant macro "ear"
		 <macrodef name="instorecsbackoffice_before_ear"/>
		 <macrodef name="instorecsbackoffice_after_ear"/>

	 before/after ant macro "production" - for hybris server only
		 <macrodef name="instorecsbackoffice_before_production" />
		 <macrodef name="instorecsbackoffice_after_production" />

 JUnit Test

	 before/after ant macro "yunitinit"
		 <macrodef name="instorecsbackoffice_before_yunitinit" />
		 <macrodef name="instorecsbackoffice_after_yunitinit" />

	 before/after ant macro "yunit"
		 <macrodef name="instorecsbackoffice_before_yunit" />
		 <macrodef name="instorecsbackoffice_after_yunit" />

 Distribution package

 	 before/after ant macro "dist" - internal target; only for use when platform is available in source code
		 <macrodef name="instorecsbackoffice_after_dist"/>
		 <macrodef name="instorecsbackoffice_before_dist"/>

	 before/after ant macro "dist_copy" - internal target; only for use when platform is available in source code
		 <macrodef name="instorecsbackoffice_before_dist_copy"/>
		 <macrodef name="instorecsbackoffice_after_dist_copy"/>

 	 With these filters you can override the default extension filters defined in platform/resources/ant/dist/filtersets.xml
 	  	 <patternset id="extension.instorecsbackoffice.binary.filter">
 	  	  	 <patternset refid="extension.filter" />
 	  	  	 <exclude name="**/*-source.jar" />
 	  	 </patternset>
 	  	 <patternset id="extension.instorecsbackoffice.source.filter">
 	  	  	 <exclude name="**/bin/**" />
 	  	 </patternset>

 Backoffice module

 	 before/after ant macro "backoffice" - internal target; only for use when extensin is a backoffice module
		 <macrodef name="instorecsbackoffice_before_clean_backoffice"/>
		 <macrodef name="instorecsbackoffice_after_clean_backoffice"/>
		 <macrodef name="instorecsbackoffice_before_compile_backoffice"/>
		 <macrodef name="instorecsbackoffice_after_compile_backoffice"/>

--><project name="instorecsbackoffice_buildcallbacks">
	<property name="instorecsbackofficeWebFragmentSrc" value="${ext.instorecsbackoffice.path}/resources/web-fragment.xml"/>
	<property name="instorecsbackofficeWebFragmentDestJar" value="${ext.backoffice.path}/web/webroot/WEB-INF/lib/webfragmentExt_instorecsbackoffice.jar"/>

	

	

	<macrodef name="instorecsbackoffice_after_clean">
		<sequential>
			<instorecsbackoffice_remove_web_fragment/>
		</sequential>
	</macrodef>

	<macrodef name="instorecsbackoffice_after_build">
		<sequential>
			<instorecsbackoffice_remove_web_fragment/>
			<instorecsbackoffice_create_web_fragment/>
		</sequential>
	</macrodef>

	<macrodef name="instorecsbackoffice_remove_web_fragment">
		<sequential>
			<if>
				<available file="${instorecsbackofficeWebFragmentDestJar}"/>
				<then>
					<delete file="${instorecsbackofficeWebFragmentDestJar}"/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="instorecsbackoffice_create_web_fragment">
		<sequential>
			<if>
				<available file="${instorecsbackofficeWebFragmentSrc}"/>
				<then>
					<sequential>
						<jar destfile="${instorecsbackofficeWebFragmentDestJar}">
							<metainf file="${instorecsbackofficeWebFragmentSrc}"/>
						</jar>
					</sequential>
				</then>
			</if>
		</sequential>
	</macrodef>

	<patternset id="instorecsbackoffice.localization.pattern">
		<!-- core and hmc  -->
		<include name="**/*locales*_en.properties"/>
		<exclude name="**/hmc/web/webroot/WEB-INF/classes/**/*"/>
		<exclude name="**/unittest/**/*"/>

		<!-- cockpit (ng) -->
		<include name="**/i3-label_en.properties"/>
		<include name="**/labels_en.properties"/>

		<!-- messages -->
		<include name="**/*messages_en.properties"/>
		<include name="**/*messages.properties"/>

		<!-- frontend properties files in WEB-INF/messages folder -->
		<include name="**/WEB-INF/messages/*_en.properties"/>

		<!-- csv and impex -->
		<include name="**/*_en.csv"/>
		<include name="**/*_en.impex"/>

		<include name="**/lang-en.properties"/>

		<!-- email localizations from yacceleratorcore -->
		<include name="resources/**/messages/*_en.properties"/>

		<!-- include validation messages -->
		<include name="resources/**/ValidationMessages.properties"/>
	</patternset>

</project>
