<?xml version="1.0" encoding="UTF-8"?>
<!-- 
Artifact: sapppspricing-global-spring 
@Copyright (c) 2016, SAP SE, Germany, All rights reserved. 
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/util
		     http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- Catalog price cache -->
	<alias alias="sapPPSProductPriceCacheRegion" name="sapDefaultPPSProductPriceCacheRegion" />
	<bean id="sapDefaultPPSProductPriceCacheRegion" class="de.hybris.platform.regioncache.region.impl.EHCacheRegion">
		<constructor-arg name="name" value="sapPPSProductPriceCacheRegion" />
		<constructor-arg name="maxEntries" value="${sapppspricing.catalogpricecache.maxentries}" />
		<constructor-arg name="evictionPolicy" value="${sapppspricing.catalogpricecache.evictionpolicy}" />
		<constructor-arg name="statsEnabled" value="${sapppspricing.catalogpricecache.statsenabled}" />
		<constructor-arg name="exclusiveComputation" value="${sapppspricing.catalogpricecache.exclusivecomputation}" />
		<constructor-arg name="ttlSeconds" value="${sapppspricing.catalogpricecache.timetolive}" />
		<property name="handledTypes">
			<array>
				<value>SAP_PPS_CATALOGPRICE</value>
			</array>
		</property>
	</bean>

	<bean id="sapPPSProductPriceCacheRegionAdder" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject" ref="cacheRegionsList" />
		<property name="targetMethod" value="add" />
		<property name="singleton" value="true" />
		<property name="arguments">
			<ref bean="sapPPSProductPriceCacheRegion" />
		</property>
	</bean>
	
	<!-- PPS launcher -->
	<bean id="sapPPSAppContextCreator" class="com.sap.ppengine.core.spring.impl.ApplicationContextCreatingBeanImpl">
		<property name="contextInitializers" ref="sapPPSContextInitializers" />
	</bean>

	<alias name="sapDefaultPPSContextInitializers" alias="sapPPSContextInitializers" />
	<util:list id="sapDefaultPPSContextInitializers">
		<ref bean="sapPPSHybrisPropertySourceAdder" />
	</util:list>

	<alias name="sapDefaultPPSHybrisPropertySourceAdder" alias="sapPPSHybrisPropertySourceAdder" />
	<bean id="sapDefaultPPSHybrisPropertySourceAdder" class="com.sap.ppengine.core.spring.impl.PropertySourceAdderImpl">
		<property name="propertySource" ref="sapPPSHybrisPropertySource" />
	</bean>

	<alias name="sapDefaultPPSHybrisPropertySource" alias="sapPPSHybrisPropertySource" />
	<bean id="sapDefaultPPSHybrisPropertySource" class="org.springframework.core.env.PropertiesPropertySource">
		<constructor-arg value="hybrisSource" />
		<constructor-arg>
			<map>
				<entry key="sap.core.ppsconfiglocation" value="${sapppspricing.pps.configfile}" />
				<!-- Jndi name potentially used by hybris - not necessarily set! -->
				<entry key="sap.sapppspricing.db.jndiname" value="#{ '${db.pool.fromJNDI}'.isEmpty() or '${db.pool.fromJNDI}'.startsWith('$') ? 'dummy' : '${db.pool.fromJNDI}'}" />
				<!-- Property indicating the DataSource type: Jndi or Direct-->
				<entry key="sap.sapppspricing.db.dstype" value="#{ '${db.pool.fromJNDI}'.isEmpty() or '${db.pool.fromJNDI}'.startsWith('$') ? 'Direct' : 'Jndi'}" />
				<!-- Take over DB connection parameters of hybris as long as no sapppspricing specific properties for the DB are set -->
				<!-- Note: sapppspricing.db.username and sapppspricing.db.username are not for productive use
				     due to security considerations -->
				<entry key="sap.dataaccess-common.db.url" value="${sapppspricing.db.url:${db.url}}" />
				<entry key="sap.dataaccess-common.db.userName" value="${sapppspricing.db.username:${db.username}}" />
				<entry key="sap.dataaccess-common.db.passWord" value="${sapppspricing.db.password:${db.password}}" />
				<entry key="sap.dataaccess-common.db.driverClassName" value="${sapppspricing.db.driver:${db.driver}}" />
				<entry key="sap.dataaccess-common.db.client" value="${sapppspricing.dbclient}" />
			</map>
		</constructor-arg>
	</bean>
	

</beans>
